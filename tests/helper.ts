import {
  type Account,
  Aptos,
  type UserTransactionResponse,
  type TypeTag,
  type EntryFunctionArgumentTypes,
  type HexInput,
  type InputGenerateTransactionData,
  type SimpleEntryFunctionArgumentTypes,
  AccountAddress,
  isUserTransactionResponse,
  type AnyRawTransaction,
  NetworkToNetworkName,
  AptosConfig,
  Network,
} from "@aptos-labs/ts-sdk";
import { type ObjectAddressStruct } from "src/boilerplate/types";
import publishJson from "./move/arguments/publish.json";

export async function publishPackage(
  aptos: Aptos,
  senderAccount: Account,
  metadataBytes: HexInput,
  codeBytes: Array<HexInput>,
) {
  const rawTransaction = await aptos.publishPackageTransaction({
    account: senderAccount.accountAddress.toString(),
    metadataBytes,
    moduleBytecode: codeBytes,
  });
  const txn = await aptos.signAndSubmitTransaction({
    signer: senderAccount,
    transaction: rawTransaction,
  });
  return (await aptos.waitForTransaction({
    transactionHash: txn.hash,
  })) as UserTransactionResponse;
}

// Transaction builder helpers
// single signer
export async function rawTransactionHelper(
  aptos: Aptos,
  senderAccount: Account,
  functionName: string,
  typeArgs: TypeTag[],
  args: Array<EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes>,
): Promise<UserTransactionResponse> {
  const rawTransaction = await aptos.transaction.build.simple({
    sender: senderAccount.accountAddress.toString(),
    data: {
      function: `${senderAccount.accountAddress.toString()}::tx_args_module::${functionName}`,
      typeArguments: typeArgs,
      functionArguments: args,
    },
  });
  const senderAuthenticator = await aptos.transaction.sign({
    signer: senderAccount,
    transaction: rawTransaction,
  });
  const transactionResponse = await aptos.transaction.submit.simple({
    transaction: rawTransaction,
    senderAuthenticator,
  });
  const response = await aptos.waitForTransaction({
    transactionHash: transactionResponse.hash,
  });
  return response as UserTransactionResponse;
}

// multi agent/fee payer
export const rawTransactionMultiAgentHelper = async (
  aptos: Aptos,
  senderAccount: Account,
  functionName: string,
  typeArgs: Array<TypeTag>,
  args: Array<EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes>,
  secondarySignerAccounts: Array<Account>,
  feePayerAccount?: Account,
): Promise<UserTransactionResponse> => {
  let transactionData: InputGenerateTransactionData;
  let generatedTransaction: AnyRawTransaction;
  // Fee payer
  if (feePayerAccount) {
    transactionData = {
      sender: senderAccount.accountAddress,
      data: {
        function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
        typeArguments: typeArgs,
        functionArguments: args,
      },
      secondarySignerAddresses: secondarySignerAccounts?.map(
        (account) => account.accountAddress.data,
      ),
      withFeePayer: true,
    };
    generatedTransaction = await aptos.transaction.build.multiAgent(transactionData);
  } else if (secondarySignerAccounts) {
    transactionData = {
      sender: senderAccount.accountAddress,
      data: {
        function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
        typeArguments: typeArgs,
        functionArguments: args,
      },
      secondarySignerAddresses: secondarySignerAccounts?.map(
        (account) => account.accountAddress.data,
      ),
    };
    generatedTransaction = await aptos.transaction.build.multiAgent(transactionData);
  } else {
    transactionData = {
      sender: senderAccount.accountAddress,
      data: {
        function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
        typeArguments: typeArgs,
        functionArguments: args,
      },
    };
    generatedTransaction = await aptos.transaction.build.simple(transactionData);
  }

  const senderAuthenticator = aptos.transaction.sign({
    signer: senderAccount,
    transaction: generatedTransaction,
  });

  const secondaryAuthenticators = secondarySignerAccounts.map((account) =>
    aptos.transaction.sign({
      signer: account,
      transaction: generatedTransaction,
    }),
  );

  let feePayerAuthenticator;
  let transactionResponse;
  if (feePayerAccount !== undefined) {
    feePayerAuthenticator = aptos.transaction.signAsFeePayer({
      signer: feePayerAccount,
      transaction: generatedTransaction,
    });
    transactionResponse = await aptos.transaction.submit.multiAgent({
      transaction: generatedTransaction,
      senderAuthenticator,
      additionalSignersAuthenticators: secondaryAuthenticators,
      feePayerAuthenticator,
    });
  } else {
    transactionResponse = await aptos.transaction.submit.multiAgent({
      transaction: generatedTransaction,
      senderAuthenticator,
      additionalSignersAuthenticators: secondaryAuthenticators,
    });
  }

  const response = await aptos.waitForTransaction({
    transactionHash: transactionResponse.hash,
  });
  if (!isUserTransactionResponse(response)) {
    throw new Error("Expected user transaction response");
  }
  return response;
};

export const PUBLISHER_ACCOUNT_PK =
  "0xc694948143dea59c195a4918d7fe06c2329624318a073b95f6078ce54940dae9";
export const PUBLISHER_ACCOUNT_ADDRESS =
  "4cba8c2b7f78052a6d5d67999620fecc77ea3d691d07f2c787151f9864b0b6a8";

// hard-coded bytecode for the contract, so we don't have to recompile it every time in ci
export const ARGUMENT_TESTS_CONTRACT_METADATA = publishJson.args[0].value as string;

// interpolate a named address into the contract bytecode
export async function getModuleBytecodeStrings() {
  const modules = Array.isArray(publishJson.args[1].value)
    ? publishJson.args[1].value
    : [publishJson.args[1].value];
  const modulesWithCorrectAddress = modules.map((module) =>
    String(module).replaceAll(
      "0a56e8b03118e51cf88140e5e18d1f764e0a1048c23e7c56bd01bd5b76993451",
      PUBLISHER_ACCOUNT_ADDRESS,
    ),
  );
  return modulesWithCorrectAddress;
}

export async function publishArgumentTestModule(
  aptos: Aptos,
  senderAccount: Account,
): Promise<UserTransactionResponse> {
  const moduleBytecodeStrings = await getModuleBytecodeStrings();
  const response = await publishPackage(
    aptos,
    senderAccount,
    ARGUMENT_TESTS_CONTRACT_METADATA,
    moduleBytecodeStrings,
  );
  return response;
}

export const normalizeObjectAddress = (obj: ObjectAddressStruct) => ({
  inner: AccountAddress.from(obj.inner).toString(),
});

// To normalize the addresses. We do this because the first Object address starts with a 0, the
// JSON response doesn't include it but ours does.
export const normalizeObjectAddresses = (vectorOfObjects: Array<ObjectAddressStruct>) =>
  vectorOfObjects.map((obj: ObjectAddressStruct) => normalizeObjectAddress(obj));

// Script function byte code from `arguments/sources/script.move` for the
// transaction_arguments.test.ts script function tests.
export const MULTI_SIGNER_SCRIPT_ARGUMENT_TEST =
  // eslint-disable-next-line max-len
  `a11ceb0b060000000601000802080e03160a05203907596408bd0140000000010002010302040700000507010001030608000107020300030804010015060c060c060c060c060c050505050501020d0e03040f0508000b010108020a020001060c01050b01020d0e03040f0508000b010108020a02066f626a656374067369676e657206737472696e670e74785f617267735f6d6f64756c6506537472696e67064f626a6563740d456d7074795265736f757263650a616464726573735f6f66186173736572745f76616c7565735f666f725f7363726970740000000000000000000000000000000000000000000000000000000000000001${PUBLISHER_ACCOUNT_ADDRESS}000001490b0011000b0521040605100b04010b03010b02010b0101066400000000000000270b0111000b06210416051e0b04010b03010b0201066500000000000000270b0211000b07210424052a0b04010b0301066600000000000000270b0311000b0821043005340b0401066700000000000000270b0411000b0921043a053c066800000000000000270b0a0b0b0b0c0b0d0b0e0b0f0b100b110b120b130b14110102${PUBLISHER_ACCOUNT_ADDRESS}000001490b0011000b0521040605100b04010b03010b02010b0101066400000000000000270b0111000b06210416051e0b04010b03010b0201066500000000000000270b0211000b07210424052a0b04010b0301066600000000000000270b0311000b0821043005340b0401066700000000000000270b0411000b0921043a053c066800000000000000270b0a0b0b0b0c0b0d0b0e0b0f0b100b110b120b130b14110102${PUBLISHER_ACCOUNT_ADDRESS}000001150b0011000b012104060508066400000000000000270b020b030b040b050b060b070b080b090b0a0b0b0b0c110102`;

// Interpolate a named address into the contract bytecode.
export async function getContractBytecode() {
  // eslint-disable-next-line max-len
  return `0xa11ceb0b060000000c01001002101c032cc00104ec018e0205fa03990b07930ff704088a144006ca14aa0710f41b82020af61d1a0c901efb340d8b5306000001010102010301040105010601070008080000090800050a0700020b07010001030d0701000002280200000c000100000e020100000f0103000010010400001101050000120601000013070100001408010000150701000016080100001701011f000000000000000000000000000000000000000000000000000000000000000018090105020202020800190a0a00051e0c0d00011f0f0f0007201001010003211213010003221617010003231617010003241618010003251917010003261a12010002271d1e01080429061e00022a1e2200022b232400022c23250108032d01130100062e010d01000f0e10030f0c0f030f0d0f14110312031303140315030f15161c1a1c0f210f170f270f280f0f0f290f2a0f1e1b0e110e120e130e140e10171117121713171417100e1027112712271327142710281128122813281428100f110f120f130f140f10291129122913291429102a112a122a132a142a101e111e121e131e141e100d110d120d130d140d102111211221132114211c121c171c2d1c0e1c2e1c271c2f1c281c301c0f1c311c291c321c2a1c331c1e1c341c0d1c351c211c361c371c381c0c1c391c3a1c3b1c3c1c3d1c3e1c3f1c401c411c421c431c441c451c031c461c471c481c491c4a1c4b1c4c1c4d1c4e1c4f1c501c511c521c531c541c551c561c571c581c591c5a1c5b1c5c1c5d0b01020d0e03040f0508020b030108000a0200040a0a020a0a08020a0b04010a08020a0a0b04010a0802010a080203050505030b030108000b030108000b0301080001060c21060c01020d0e03040f0508020b030108000a020a010a020a0d0a0e0a030a040a0f0a050a08020a0b030108000b0401020b0401010b0401020b04010d0b04010e0b0401030b0401040b04010f0b0401050b040108020b04010b0301080026060c0c060c0c060c0a0501020d0e03040f0508020b030108000a020a010a020a0d0a0e0a030a040a0f0a050a08020a0b030108000b0401020b0401010b0401020b04010d0b04010e0b0401030b0401040b04010f0b0401050b040108020b04010b030108000509000901090209030b030109042001020d0e03040f0508020b030108000a020a010a020a0d0a0e0a030a040a0f0a050a08020a0b030108000b0401020b0401010b0401020b04010d0b04010e0b0401030b0401040b04010f0b0401050b040108020b04010b0301080009030b03010800030a020a020a020a020a020a02010a020108020102010301070a0900530b04010a08020b04010a080203030303030303030b04010a08020b04010a08020a0a08020a0b04010a08020a0a0b04010a0802060a0802060a08020303030303030303030b04010a08020b04010a08020b04010a08020b04010a08020a08020a08020a08020a08020b04010a08020a0a0b04010a08020a0a020a020a020a0a020a0a08020a08020a08020a0a08020a0b04010a08020a08020a08020a0b04010a08020a0a0b04010a08020a0b04010a08020a08020a08020a0b04010a08020a0a0b04010a08020a0a020a020a020a0a020a0a08020a08020a08020a0a08020a0b04010a08020a08020a08020a0b04010a08020a0a0b04010a08020a0b04010a08020a08020a08020a0b04010a08020a0a020a020a0a08020a08020a08020a08020a0a020a020a0a08020a08020a08020a0802010900010b04010900010b04010a0802010a0b04010a080201060b0401090001010106090002060b0401090006090001070b0401090007070a08020a02030a08020a020a0a020a0a0201080001060b03010900010501060801060805030b030108000c0a0b030108000801010b0301080001080501060805010c010b0301090089010a0b0301080003030303030303030303030303030303030303030303060206010602060d060e06030604060f0605060802060b030108000b0301080003030303030303030303030b030108000b030108000b030108000b0401020b0401010b0401020b04010d0b04010e0b0401030b0401040b04010f0b0401050b040108020b04010b030108000b0401020b0401010b0401020b04010d0b04010e0b0401030b0401040b04010f0b0401050b040108020b04010b030108000a020a020a010a010a020a020a0d0a0d0a0e0a0e0a030a030a040a040a0f0a0f0a050a050a08020a08020a0b030108000a0b030108000a020a020a010a010a020a020a0d0a0d0a0e0a0e0a030a030a040a040a0f0a0f0a050a050a08020a08020a0b030108000a0b030108000a020a010a020a0d0a0e0a030a040a0f0a050a08020a0b030108000a020a010a020a0d0a0e0a030a040a0f0a050a08020a0b03010800010d010e0104010f0903030a050a050a050a050a050a050a051e01010101010101010101010101010101010101010101010101010101010101090101090201090301090401090501090601090701090801090901090a010a0101090b01090c010a0d01090d010a0e01090e010a0301090f010a04010910010a0f010911010a05010912010913010a0b03010800010914010b040101010915010b040102010916010b04010d010917010b04010e010918010b040103010919010b04010401091a010b04010f01091b010b04010501091c010b0401080201091d010b04010b0301080001091e010a0a0b04010a0b04010b030108000e74785f617267735f6d6f64756c65056572726f72066f626a656374066f7074696f6e067369676e657206737472696e6709747970655f696e666f06766563746f720d456d7074795265736f757263650953657475704461746106537472696e67064f626a656374186173736572745f76616c7565735f666f725f736372697074064f7074696f6e11636f6d706c65785f617267756d656e74731a6765745f65787065637465645f766563746f725f737472696e67196765745f746573745f6f626a6563745f616464726573736573106765745f746573745f6f626a656374730b696e69745f6d6f64756c6511707269766174655f617267756d656e747322707269766174655f617267756d656e74735f6d756c7469706c655f7369676e657273107075626c69635f617267756d656e7473217075626c69635f617267756d656e74735f6d756c7469706c655f7369676e65727309747970655f7461677312747970655f746167735f666f725f6172677312766965775f616c6c5f617267756d656e74730b64756d6d795f6669656c640e656d7074795f6f626a6563745f310e656d7074795f6f626a6563745f320e656d7074795f6f626a6563745f3304757466380d696e76616c69645f7374617465077265766572736504736f6d650769735f6e6f6e650769735f736f6d6506626f72726f7708636f6e7461696e7307657874726163740e6f626a6563745f616464726573730e436f6e7374727563746f725265660a616464726573735f6f660d6372656174655f6f626a6563740f67656e65726174655f7369676e65721b6f626a6563745f66726f6d5f636f6e7374727563746f725f726566046e6f6e6509747970655f6e616d65${PUBLISHER_ACCOUNT_ADDRESS}00000000000000000000000000000000000000000000000000000000000000010308d007000000000000030810270000000000000308611e0000000000000520${PUBLISHER_ACCOUNT_ADDRESS}`;
}

/**
 * Use this function whenever you want an Aptos client.
 *
 * By default it uses Network.LOCAL. You can change this in one of two ways:
 *
 * 1. If you set the APTOS_NETWORK env var, it will use that Network. For example,
 *    export APTOS_NETWORK=devnet.
 * 2. For more control, you can set the APTOS_NODE_API_URL, APTOS_INDEXER_API_URL, and
 *    APTOS_FAUCET_API_URL env vars.
 *
 * The APTOS_NETWORK env var is applied first, followed by the others. So if you set
 * APTOS_NETWORK=devnet and APTOS_NODE_API_URL=http://localhost:8080, it will use the
 * given URL for the node API and the the default URLs for devnet for the other APIs.
 */
export function getAptosClient(additionalConfig?: Partial<AptosConfig>): {
  aptos: Aptos;
  config: AptosConfig;
} {
  const networkRaw = process.env.APTOS_NETWORK;
  const network = networkRaw ? NetworkToNetworkName[networkRaw] : Network.LOCAL;
  if (!network) {
    throw new Error(`Unknown network, confirm APTOS_NETWORK env var is valid: ${networkRaw}`);
  }
  const config = new AptosConfig({
    network,
    fullnode: process.env.APTOS_NODE_API_URL,
    indexer: process.env.APTOS_INDEXER_API_URL,
    faucet: process.env.APTOS_FAUCET_API_URL,
    ...additionalConfig,
  });
  const aptos = new Aptos(config);
  return { aptos, config };
}
